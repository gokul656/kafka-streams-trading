package com.malware.matchingengine.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.malware.matchingengine.model.Orders;
import com.malware.matchingengine.model.Transaction;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.kstream.JoinWindows;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.Produced;
import org.apache.kafka.streams.kstream.StreamJoined;
import org.springframework.context.annotation.Bean;
import org.springframework.kafka.support.serializer.JsonSerde;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.util.UUID;
import java.util.function.BiConsumer;

@Slf4j
@Service
@RequiredArgsConstructor
public class OrderProcessor {

    private final TradeLogic tradeLogic;

    @Bean
    public BiConsumer<KStream<Long, Orders>, KStream<Long, Orders>> orders() {
        return (buyOrder, sellOrder) -> buyOrder
                .selectKey((k, v) -> v.getProductId())
                .join(sellOrder.selectKey((k, v) -> v.getProductId()),
                        this::execute,
                        JoinWindows.of(Duration.ofSeconds(10)),
                        StreamJoined.with(
                                Serdes.Integer(),
                                new JsonSerde<>(Orders.class),
                                new JsonSerde<>(Orders.class)))
                .filterNot(((key, value) -> value == null))
                .to("transactions", Produced.with(Serdes.Integer(), new JsonSerde<>(Transaction.class).noTypeInfo()));
    }

    @SneakyThrows
    private Transaction execute(Orders buyOrder, Orders sellOrder) {
        log.info("EXECUTING :: BUY-ORDER :: {} | SELL-ORDER :: {}", buyOrder.getOrderId(), sellOrder.getOrderId());
        if (buyOrder.getAmount() < sellOrder.getAmount()) return null;
        if (buyOrder.getOrderId() == null || sellOrder.getOrderId() == null) return null;

        boolean performTrade = tradeLogic.performTrade(
                buyOrder.getOrderId(),
                sellOrder.getOrderId(),
                Math.min(buyOrder.getProductCount(), sellOrder.getProductCount())
        );
        if (!performTrade) return null;

        return Transaction.builder()
                .txnId(UUID.randomUUID().toString())
                .buyOrderId(buyOrder.getOrderId())
                .sellOrderId(sellOrder.getOrderId())
                .executedAt(System.currentTimeMillis())
                .amount(buyOrder.getAmount())
                .build();
    }
}
