package com.malware.matchingengine.service;

import com.malware.matchingengine.model.OrderReceipt;
import com.malware.matchingengine.model.OrderType;
import com.malware.matchingengine.model.Orders;
import com.malware.matchingengine.repository.OrderBookRepository;
import com.malware.matchingengine.repository.OrderReceiptRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.UUID;

@Service
@RequiredArgsConstructor
public class TradeLogic {

    private final OrderBookRepository orderBookRepository;
    private final OrderReceiptRepository orderReceiptRepository;

    public boolean performTrade(Integer buyOrderId, Integer sellOrderId, int amount) {

        Orders buyOrder = orderBookRepository.findByOrderId(buyOrderId).orElse(null);
        Orders sellOrder = orderBookRepository.findByOrderId(sellOrderId).orElse(null);
        if (buyOrder == null || sellOrder == null) return false;

        int buyAvailableCount = buyOrder.getProductCount() - buyOrder.getFilledCount();
        int sellAvailableCount = sellOrder.getProductCount() - sellOrder.getFilledCount();
        if (buyAvailableCount < amount || sellAvailableCount < amount) return false;

        buyOrder.setFilledCount(buyOrder.getFilledCount() + amount);
        sellOrder.setFilledCount(sellOrder.getFilledCount() + amount);

        orderBookRepository.save(buyOrder);
        orderBookRepository.save(sellOrder);

        OrderReceipt buyReceipt = OrderReceipt.builder()
                .txnId(UUID.randomUUID().toString())
                .buyOrderId(buyOrder.getOrderId())
                .sellOrderId(sellOrder.getOrderId())
                .amount(buyOrder.getAmount())
                .execAmount(amount)
                .orderType(OrderType.BUY)
                .executedAt(System.currentTimeMillis())
                .build();

        OrderReceipt sellReceipt = OrderReceipt.builder()
                .txnId(UUID.randomUUID().toString())
                .buyOrderId(buyOrder.getOrderId())
                .sellOrderId(sellOrder.getOrderId())
                .executedAt(System.currentTimeMillis())
                .amount(sellOrder.getAmount())
                .execAmount(amount)
                .orderType(OrderType.SELL)
                .build();

        saveReceipt(buyReceipt);
        saveReceipt(sellReceipt);

        return true;
    }

    @Transactional
    private void saveReceipt(OrderReceipt receipt) {
        orderReceiptRepository.save(receipt);
    }
}
